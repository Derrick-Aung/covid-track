{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/banner.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","api_url","fetchData","country","a","changeableUrl","Axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","banner","src","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27c0dc70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__29lOa\",\"card\":\"Cards_card__2RzIB\",\"infected\":\"Cards_infected__28yMR\",\"recovered\":\"Cards_recovered__2b8Tw\",\"deaths\":\"Cards_deaths__1qzHz\"};","import React from 'react'\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data:{confirmed, recovered, deaths, lastUpdate}}) => {\r\n    \r\n    if(!confirmed){\r\n        return 'Loading...'\r\n    }\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                            start={0} \r\n                            end={confirmed.value}\r\n                            duration={1.5}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of cases of covid19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recoveries\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                            start={0} \r\n                            end={recovered.value}\r\n                            duration={1.5}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of cases of covid19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                    <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <CountUp \r\n                            start={0} \r\n                            end={deaths.value}\r\n                            duration={1.5}\r\n                            separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of cases of covid19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import Axios from \"axios\";\r\n\r\nconst api_url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = api_url;\r\n\r\n    if (country) {\r\n        changeableUrl = `${api_url}/countries/${country}`;\r\n    }\r\n    try {\r\n        const {\r\n            data: { confirmed, recovered, deaths, lastUpdate },\r\n        } = await Axios.get(changeableUrl);\r\n        const modifiedData = { confirmed, recovered, deaths, lastUpdate };\r\n\r\n        return modifiedData;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await Axios.get(`${api_url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        console.log(modifiedData);\r\n        return modifiedData;\r\n    } catch (error) {}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {\r\n            data: { countries },\r\n        } = await Axios.get(`${api_url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {}\r\n};\r\n","import React, {useState, useEffect} from 'react'\r\nimport {fetchDailyData} from '../../api'\r\nimport {Line,Bar} from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = ({data:{confirmed,deaths,recovered}, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        console.log(dailyData)\r\n\r\n        fetchAPI();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n        (<Line\r\n            data =  {{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                },{\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255,0,0,0.5)',\r\n                    fill: true,\r\n                }],\r\n            }}\r\n        />):null\r\n    );\r\n\r\n    const barChart = (\r\n        \r\n        confirmed ?\r\n        (<Bar\r\n            data = {{\r\n                labels: ['Infected','Recovered','Deaths'],\r\n                datasets: [\r\n                    {\r\n                        label: 'People',\r\n                        backgroundColor:[\r\n                            'rgba(0,0,255,0.5)',\r\n                            'rgba(0,255,0,0.5)',\r\n                            'rgba(255,0,0,0.5)',\r\n                        ],\r\n                        data:[confirmed.value,recovered.value,deaths.value]\r\n                    }\r\n                ]\r\n            }}\r\n            options={{\r\n                 legend: {display: false},\r\n                title: {display:true, text:`Current state in ${country}`}\r\n            }}\r\n        />)\r\n        : null\r\n    )\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country ? barChart:lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react'\r\nimport {NativeSelect, FormControl} from '@material-ui/core'\r\nimport {fetchCountries} from '../../api'\r\n\r\nimport styles from './CountryPicker.module.css'\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async ()=> {\r\n            setFetchedCountries(await fetchCountries())\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [])\r\n\r\n    console.log(fetchedCountries)\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, { Component } from 'react'\r\n\r\nimport { Cards, Chart, CountryPicker } from './components'\r\nimport styles from './App.module.css'\r\nimport { fetchData } from './api'\r\nimport banner from './images/banner.png'\r\n\r\nexport class App extends Component {\r\n\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({data: fetchedData})\r\n    }\r\n\r\n    handleCountryChange = async(country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data: fetchedData, country: country})\r\n    }\r\n\r\n    render() {\r\n        const {data, country} = this.state\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.banner} src={banner} alt=\"COVID-19\"/>\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1PSL0\",\"banner\":\"App_banner__YjFH6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2s-UX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1DvjC\"};","module.exports = __webpack_public_path__ + \"static/media/banner.d7265326.png\";"],"sourceRoot":""}